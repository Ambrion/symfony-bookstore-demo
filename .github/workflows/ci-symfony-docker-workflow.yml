name: Symfony CI/CD Pipeline (using your .docker/docker-compose.yml)

on:
    push:
        branches: [ master ]
    pull_request:
        branches: [ master ]

jobs:
    test:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Copy .env for CI
              working-directory: .docker
              run: |
                  # GitHub Actions не подхватывает .env автоматически — создадим его
                  cp .env.dist .env

            - name: Start Docker Compose services
              working-directory: .docker
              run: |
                  docker compose up -d --wait

            - name: Wait for MySQL readiness (optional extra safety)
              working-directory: .docker
              run: |
                  docker compose -f docker-compose.ci.yml up -d --wait

            - name: Install Composer dependencies (inside php container)
              working-directory: .docker
              run: |
                  docker compose exec -T -u root php composer install --prefer-dist --no-progress --no-interaction

            - name: Prepare .env in project root
              working-directory: .docker
              run: |
                  echo "APP_ENV=test" >> .env
                  echo 'DATABASE_URL="mysql://user_bookstore:password_bookstore@bookstore_mysql:3306/db_bookstore?serverVersion=9.3.0&charset=utf8mb4"' >> .env

            - name: Run database migrations (if needed for tests)
              working-directory: .docker
              run: |
                  docker compose exec -T php bin/console doctrine:database:create --if-not-exists
                  docker compose exec -T php bin/console doctrine:migrations:migrate --no-interaction

            - name: Run PHPUnit tests
              working-directory: .docker
              run: |
                  docker compose exec -T php bin/phpunit --colors=never

            - name: Run PHPStan
              working-directory: .docker
              run: |
                  docker compose exec -T php vendor/bin/phpstan analyse src --level=max

            - name: Run PHP CS Fixer (dry-run)
              working-directory: .docker
              run: |
                  docker compose exec -T php vendor/bin/php-cs-fixer fix --dry-run --diff --verbose

            - name: Stop and remove containers
              if: always()
              working-directory: .docker
              run: |
                  docker compose down -v --remove-orphans
